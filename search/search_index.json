{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ACMESky Documentation","text":"<p>This is the project's documentation of the Service Oriented Software Engineering's course (Ingegneria del Software Orientata ai Servizi) for the AA 2023/2024 University of Bologna's Master Degree. The team members are:</p> <ul> <li>Luca Bassi</li> <li>Gabriele Genovese</li> <li>Jacopo Rimediotti</li> </ul>"},{"location":"#description-of-the-specifications","title":"Description of the specifications","text":"<p>ACMESky is a fictional company that offers multiple services for buying and managing client's return flights. A Service Oriented Architecture (SOA) should be designed and implemented to support ACMESky's activities.</p> <p>ACMESky offers a service that allows customers to specify, through a web portal, their interest in round-trip air transfers within a defined period and at a cost below a certain set limit.</p> <p>ACMESky daily queries airlines to obtain quotes for flights of interest to its customers.</p> <p>ACMESky also receives last-minute offers from airlines, which are sent upon activation without a preset schedule.</p> <p>When ACMESky finds a flight compatible with a customer's request, it prepares an offer.</p> <p>The offer is sent to the customer via the messaging app Prontogram. If interested, the customer has 24 hours to connect to the ACMESky web portal to confirm the offer, specifying the code received via Prontogram.</p> <p>During confirmation, the customer must also proceed with the payment. ACMESky relies on a banking service provider for payment management: ACMESky redirects the customer to the provider's site and then awaits the provider's confirmation message that the payment has been made.</p> <p>If the flight cost exceeds 1000 euros, ACMESky offers the customer a free transfer service to/from the airport if it is within 30 kilometers of their home.</p> <p>In this case, ACMESky uses various chauffeur rental companies with which it has commercial agreements. The chosen company is the one that has a location closest to the customer's home. ACMESky sends a request to this company to book a transfer that departs two hours before the scheduled flight departure time.</p>"},{"location":"#project-layout","title":"Project layout","text":"<p>This is the structure of the project's folder.</p> <pre><code>docs/                           # Documentation contents\nresources/\n    bpmn/                       # BPMN source files\n    bpmn-chors/                 # BPMN Choreography source files\n    uml/                        # UML source files\nsrc/                            # All microservices codebase\ndocker-compose-[service].yaml   # All docker compose files\nrequirements.txt                # Documentation requirements\nmkdocs.yml                      # Documentation config file\n</code></pre>"},{"location":"#deploy-using-docker-compose","title":"Deploy using Docker compose","text":"<p>To start all the infrastructure just use the following commands in the root directory and wait for a bit!</p> <p>If running locally as demo you must run the following docker-compose command first as setup: This will create a fake shared network which allow all other container to comunicate each to others.</p> <pre><code>docker-compose -f docker-compose-shared.yaml up -d\n</code></pre> <p>Deploy all platforms compose</p> <pre><code>docker-compose \\\n    -f docker-compose-camunda.yaml \\\n    -f docker-compose-ACMESky.yaml \\\n    -f docker-compose-FlightCompany.yaml \\\n    -f docker-compose-Prontogram.yaml \\\n    -f docker-compose-GeoDistance.yaml \\\n    -f docker-compose-NCC.yaml \\\n    -f docker-compose-Bank.yaml \\\n    -f docker-compose-workers.yaml \\\n    up -d\n</code></pre>"},{"location":"#docs","title":"Docs","text":"<p>This documentation is generated with Material for MkDocs.</p>"},{"location":"UML/","title":"UML","text":"<p>In this section, the SOA modeling for the ACMESky organization is presented using UML diagrams with the TinySOA profile. These diagrams aim to highlight the capabilities accessible through the system and the interfaces that expose them, both externally and internally, for each service within the SOA. Specifically, there are three types of services:</p> <ul> <li>Task (or Process): Exposes capabilities achieved through internal processes, potentially involving human participation. These are closely related to the domain problem.</li> <li>Entity: Represents a single activity, usually automated (e.g., saving a record in a database).</li> <li>Utility: Similar to Tasks but not directly tied to the domain problem.</li> </ul>"},{"location":"UML/#requesting-flights","title":"Requesting flights","text":""},{"location":"UML/#registering-a-users-interest","title":"Registering a user's interest","text":""},{"location":"UML/#receiving-and-notify-last-minute-offers","title":"Receiving and notify last-minute offers","text":""},{"location":"UML/#buying-a-ticket","title":"Buying a ticket","text":""},{"location":"bpmn/","title":"BPMN","text":"<p>This documentation provides a simple overview of the BPMN (Business Process Model and Notation) diagram developed using Camunda Modeler. The BPMN diagram is an essential tool for modeling, visualizing, and optimizing complex business processes, ensuring that all stages of the process are clearly outlined and understandable.</p> <p></p> <p>The BPMN diagram includes many participants representing the main actors and components of the system. Below is a description of the participants' configuration and their interactions within the others.</p>"},{"location":"bpmn/#participants","title":"Participants","text":""},{"location":"bpmn/#new-client","title":"New client","text":"<p>The New client participant represents a new customer in the system. The client submits an interest on the platform through the ACMESky webpage, which initiates the process.</p>"},{"location":"bpmn/#user","title":"User","text":"<p>The User participant represents the system's end-user, playing a central role in interacting with the platform. The user can initiate the purchase process submiting a code previously received. This action sets off a series of automated steps within the system, such as confirming flight availability, generating a token for the booking, and processing payment details. The user's interactions are key to triggering and advancing various business processes within the ACMESky system.</p>"},{"location":"bpmn/#acmesky","title":"ACMESky","text":"<p>The ACMESky participant serves as both the service provider and the process coordinator. It is responsible for monitoring user interests on the platform, checking for any expressed interest, and coordinating the necessary actions. Once an interest is identified, ACMESky triggers a notification to the user via the external messaging service, Prontogram, ensuring timely updates about relevant offers or flight details. Additionally, ACMESky manages other key system functions, such as user profile operations and flight availability, ensuring smooth interaction between the user and the platform.</p>"},{"location":"bpmn/#prontogram","title":"Prontogram","text":"<p>The Prontogram participant represents the ACMESky's messaging microservice. It waits for notifications from ACMESky and then proceeds to interact with the user, delivering updates based on the user's interests.</p>"},{"location":"bpmn/#flight-company","title":"Flight Company","text":"<p>The Flight Company participant represents an individual airline company within the system. It has the capability to add new flights and ticket information to the system.</p>"},{"location":"bpmn/#ncc","title":"NCC","text":"<p>The NCC participant functions as a service provider that waits for messages from ACMESky to book the nearest available NCC. Upon receiving a request, it processes the booking by identifying and reserving the closest available vehicle.</p>"},{"location":"bpmn/#bank","title":"Bank","text":"<p>The Bank participant handles payment processing within the system. Upon receiving a request from ACMESky, it generates a new payment link for the transaction. The participant then waits for confirmation that the payment has been successfully completed. In addition to processing payments, the Bank participant also has the capability to handle payment cancellations if required.</p>"},{"location":"bpmn_chor/","title":"BPMN Choreographies","text":"<p>The choreographies in bpmn format are inserted below. They follow the formal choreographies in an identical way.</p>"},{"location":"bpmn_chor/#requesting-flights-information","title":"Requesting flight's information","text":""},{"location":"bpmn_chor/#registering-a-users-interest","title":"Registering a user's interest","text":""},{"location":"bpmn_chor/#last-minute-offers","title":"Last-minute offers","text":""},{"location":"bpmn_chor/#buying-a-ticket","title":"Buying a ticket","text":""},{"location":"choreographies/","title":"Choreographies","text":"<p>The following choreographies formalise all possible interactions that may occur in the system with ACMESky. Interactions that do not include ACMESky Service as the sender or recipient are ignored, as they are external and their implementation is unknown to the company.</p>"},{"location":"choreographies/#naming-convention","title":"Naming convention","text":"<p>The following abbreviations will be used:</p> <ul> <li>\\(ACM\\): the ACMESky Service</li> <li>\\(FC_i\\): a Fight Company Service, where \\(i \\in \\{1...N\\}\\)</li> <li>\\(PG\\): the Prontogram Service</li> <li>\\(BK\\): the Bank Service</li> <li>\\(GD\\): the GeoDistance Service</li> <li>\\(USR_j\\): a user, where \\(j \\in \\{1...M\\}\\)</li> <li>\\(NCC_k\\): the NCC Service, where \\(k \\in \\{1...P\\}\\)</li> </ul> <p>where \\(N\\), \\(M\\) and \\(P\\) are natural numbers.</p>"},{"location":"choreographies/#choreography","title":"Choreography","text":"<p>All the following choreographies are part of a single parallel choreography. They are divided in four choreography for readability.</p>"},{"location":"choreographies/#requesting-flights","title":"Requesting flights","text":"<p>ACMESky should ask to every flight company what are the available flights. This task is executed every hour.</p> <p>\\(\\text{reqFlight}::=(\\text{reqFlightInfo} : ACM \\to FC_i)\\;;\\;(\\text{resFlightInfo} : FC_i \\to ACM)\\)</p> <p>where \\(i\\) can be any flight company and the operations are:</p> <ul> <li><code>reqFlightInfo</code>: request fights for the user;</li> <li><code>resFlightInfo</code>: respond fights' information to ACMESky.</li> </ul>"},{"location":"choreographies/#registering-a-users-interest","title":"Registering a user's interest","text":"<p>ACMESky should register if a user is interested in an air route.</p> <p>\\(\\text{regUser}::=(\\\\ \\; (\\text{registerFlightInterest}: USR_j \\to ACM) \\;; \\\\ \\;((\\text{resConfirm}: ACM \\to USR_j) \\,+ (\\text{resError}: ACM \\to USR_j))\\\\ )^*\\)</p> <p>where \\(j\\) can be any users who want to register an interest for a flight, then ACMESky can reply with a confirmation or an error. The operations are:</p> <ul> <li><code>registerFlightInterest</code>: request from te user to register a new interest;</li> <li><code>resConfirm</code>: confim response;</li> <li><code>resError</code>: error response.</li> </ul>"},{"location":"choreographies/#receiving-and-notify-last-minute-offers","title":"Receiving and notify last-minute offers","text":"<p>A flight company notify ACMESky that a last-minute offer is available. ACMESky, throught Prontogram, should notify every user interested. The user can decide to accept or ignore an offer. If a user accept an offer, then ACMESky notify the flight company.</p> <p>\\(\\text{lastMinOffer}::=(\\\\ \\;( \\text{recvOffer}: FC_i \\to ACM )\\;;\\\\ \\;( \\text{notifyPG}: ACM \\to PG )\\;;\\\\ \\;( \\text{notifyUsr}: PG \\to USR_j )\\;;\\\\ \\;( \\text{offerRecv}: USR_j \\to ACM )\\;;\\\\ \\;( \\text{confirmRecv}: ACM \\to FC_i )\\\\ )^*\\)</p> <p>This choreography is valid for each flight company \\(i\\) and for each user \\(n\\) that want to know about last-minute offers. The operations are:</p> <ul> <li><code>recvOffer</code>: the flight company place a new offer;</li> <li><code>notifyPG</code>: ACMESky use Prontogram API to start the notification process;</li> <li><code>notifyUsr</code>: Prontogram notify every user;</li> <li><code>offerRecv</code>: the user confirm the reception of the code offer to ACMESky;</li> <li><code>confirmRecv</code>: ACMESky confirm to the Flight company the reception of the offer.</li> </ul>"},{"location":"choreographies/#buying-a-ticket","title":"Buying a ticket","text":"<p>The user can buy a ticket, paying throughth the Bank Service. Then ACMESky check if the flight cost exceeds 1000 euros to offer free transfert service if the airport is 30 km away from the accommodation. ACMESky also book the nearest NCC company to the airport.</p> <p>\\(\\text{buyTicket}::=(\\\\ \\;(\\text{wantToBuy}: USR_j \\to ACM)\\;;\\\\ \\;(\\text{requestPayment}: ACM \\to BK)\\;;\\\\ \\;(\\text{resPaymentData}: BK \\to ACM)\\;;\\\\ \\;(\\text{resPaymentData}: ACM \\to USR_j)\\;;\\\\ \\;(\\text{payReceipt}: USR_j \\to BK)\\;;\\\\ \\;(\\\\ \\;\\;(\\\\ \\;\\;\\;(\\text{paymentFailed}: BK \\to ACM)\\;;\\\\ \\;\\;\\;(\\text{sendError}: ACM \\to USR_j)\\\\ \\;\\;)\\\\ \\;\\;+\\\\ \\;\\;(\\\\ \\;\\;\\;(\\text{paymentOk}: BK \\to ACM)\\;;\\\\ \\;\\;\\;(\\text{bookTicket}: ACM \\to FC_i)\\;;\\\\ \\;\\;\\;(\\text{sendTicketData}: FC_i \\to ACM)\\;;\\\\ \\;\\;\\;(\\\\ \\;\\;\\;\\; 1 + \\\\ \\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;(\\text{calcGeoDistance}: ACM \\to GD)\\;;\\\\ \\;\\;\\;\\;\\;(\\text{resDistance}: GD \\to ACM)\\;;\\\\ \\;\\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;\\;1 + \\\\ \\;\\;\\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;\\;\\;\\;(\\text{calcGeoDistance}: ACM \\to GD)\\;;\\\\ \\;\\;\\;\\;\\;\\;\\;\\;(\\text{resDistance}: GD \\to ACM)\\\\ \\;\\;\\;\\;\\;\\;\\;)^*\\;;\\\\ \\;\\;\\;\\;\\;\\;\\;(\\text{bookTransport}: ACM \\to NCC_k)\\;;\\\\ \\;\\;\\;\\;\\;\\;\\;(\\text{resBookTransport}: NCC_k \\to ACM)\\;;\\\\ \\;\\;\\;\\;\\;\\;)\\\\ \\;\\;\\;\\;\\;)\\\\ \\;\\;\\;\\;)\\\\ \\;\\;\\;)\\;;\\\\ \\;\\;\\;(\\text{sendTicketAndData}: ACM \\to USR_j)\\\\ \\;\\;)\\\\ \\;)\\\\ )^*\\)</p> <p>where \\(USR_j\\) is any user, \\(FC_i\\) is any flight company and \\(NCC_k\\) is any rental service. The opertations are:</p> <ul> <li><code>wantToBuy</code>: a user insert a code to buy a ticket</li> <li><code>requestPayment</code>: ACMESky requests the generation of a new payment practice</li> <li><code>resPaymentData</code>: the bank creates the payment practice and return the informations</li> <li><code>resPaymentData</code>: ACMESky returns the information to the user and ask to pay the bill</li> <li><code>payReceipt</code>: the user pay with its bank details</li> <li><code>paymentFailed</code>: the payment has failed and ACMESky is notified</li> <li><code>sendError</code>: ACMESky notify the user of the failed operation</li> <li><code>paymentOk</code>: the payment was succesful and the user is notified</li> <li><code>bookTicket</code>: ACMESky asks the flight company to book the ticket</li> <li><code>sendTicketData</code>: the flight comapany sends the ticket informations to ACMESky</li> <li><code>calcGeoDistance</code>: ACMESky asks the distance of two points to the GeoDistance service</li> <li><code>resDistance</code>: the GeoDistance service responds to ACMESky</li> <li><code>bookTransport</code>: ACMESky books a cabin for the user</li> <li><code>resBookTransport</code>: the rental service responds with details to ACMESky</li> <li><code>sendTicketAndData</code>: ACMESky sends the ticket and all the optional informations to the user</li> </ul>"},{"location":"choreographies/#verifying-connectedness","title":"Verifying connectedness","text":"<p>We will analyse the connectedness of the separeted choreographies because there are no codition for parallel composition.</p>"},{"location":"choreographies/#requesting-flights_1","title":"Requesting flights","text":"<p>This choreography is connected for the sequence because the receiver in <code>reqFlightInfo</code> is equal to the sender in <code>resFlightInfo</code>. This choreography is connected for the sender pattern.</p>"},{"location":"choreographies/#registering-a-users-interest_1","title":"Registering a user's interest","text":"<p>This choreography is connected because the receiver in <code>registerFlightInterest</code> is equal to the sender in both <code>resConfirm</code> and <code>resError</code>. This choreography is connected for the sender pattern.</p>"},{"location":"choreographies/#receiving-and-notify-last-minute-offers_1","title":"Receiving and notify last-minute offers","text":"<p>This choreography is connected because the receiver in <code>recvOffer</code> is equal to the sender in <code>notifyPG</code>, the receiver in <code>notifyPG</code> is equal to the sender in <code>notifyUsr</code>, the receiver in <code>notifyUsr</code> is equal to the sender in <code>confirmRecv</code> and the receiver in <code>confirmRecv</code> is equal to the sender in <code>recvOffer</code>. This choreography is connected for the sender pattern.</p>"},{"location":"choreographies/#buying-a-ticket_1","title":"Buying a ticket","text":"<p>This choreography is connected because:</p> <ul> <li>the receiver in <code>wantToBuy</code> is equal to the sender in <code>requestPayment</code>;</li> <li>the receiver in <code>requestPayment</code> is equal to the sender in <code>resPaymentData</code>;</li> <li>the receiver in <code>resPaymentData</code> is equal to the sender in <code>payReceipt</code>;</li> <li>the receiver in <code>payReceipt</code> is equal in both operation's senders (<code>paymentFailed</code> and <code>paymentOk</code>);</li> <li>the receiver in <code>paymentFailed</code> is equal to the sender in <code>sendError</code>;</li> <li>the receiver in <code>sendError</code> is equal to the sender in <code>sendTicketAndData</code>;</li> <li>the receiver in <code>paymentOk</code> is equal to the sender in <code>bookTicket</code>;</li> <li>the receiver in <code>bookTicket</code> is equal to the sender in <code>sendTicketData</code>;</li> <li>the receiver in <code>sendTicketData</code> is equal to the sender in <code>calcGeoDistance</code>;</li> <li>the receiver in <code>sendTicketData</code> is equal to the sender in <code>sendTicketAndData</code>;</li> <li>the receiver in <code>calcGeoDistance</code> is equal to the sender in <code>resDistance</code>;</li> <li>the receiver in <code>resDistance</code> is equal to the sender in <code>bookTransport</code>;</li> <li>the receiver in <code>resDistance</code> is equal to the sender in <code>sendTicketAndData</code>;</li> <li>the receiver in <code>resBookTransport</code> is equal to the sender in <code>sendTicketAndData</code>;</li> <li>the receiver in <code>sendTicketAndData</code> is equal to the sender in <code>wantToBuy</code>.</li> </ul> <p>This choreography is connected for the sender pattern \\((b=c)\\), so the entire choreography is connected.</p>"},{"location":"choreographies/#projections","title":"Projections","text":"<p>Choreographies where the participant taken in consideration is not present will be ignored.</p>"},{"location":"choreographies/#acm","title":"\\(ACM\\)","text":"<p>\\(\\text{proj}(\\text{reqFlight}, ACM) = \\overline{\\text{reqFlightInfo}}@FC_i\\;;\\;\\text{resFlightInfo}@FC_i\\)</p> <p>\\(\\text{proj}(\\text{regUser}, ACM) = \\text{registerFlightInterest}@USR_j\\;;\\;(\\overline{\\text{resConfirm}@USR_j}\\;+\\; \\overline{\\text{resError}@USR_j})\\)</p> <p>\\(\\text{proj}(\\text{lastMinOffer}, ACM) = ((\\text{recvOffer}@FC_i);(\\overline{\\text{notifyPG}}@PG); 1; (\\text{offerRecv}@USR_j);(\\overline{\\text{confirmRecv}}@FC_i)) \\\\ = ((\\text{recvOffer}@FC_i);(\\overline{\\text{notifyPG}}@PG); (\\text{offerRecv}@USR_j);(\\overline{\\text{confirmRecv}}@FC_i))\\)</p> <p>\\(\\text{proj}(\\text{buyTicket}, ACM) = (\\\\ \\;(\\text{wantToBuy}@USR_j)\\;;\\\\ \\;(\\overline{\\text{requestPayment}@BK})\\;;\\\\ \\;(\\text{resPaymentData}@BK)\\;;\\\\ \\;(\\overline{\\text{resPaymentData}@USR_j})\\;;\\\\ \\;1\\;;\\\\ \\;(\\\\ \\;\\;(\\\\ \\;\\;\\;(\\text{paymentFailed}@BK)\\;;\\\\ \\;\\;\\;(\\overline{\\text{sendError}}@USR_j)\\\\ \\;\\;)\\\\ \\;\\;+\\\\ \\;\\;(\\\\ \\;\\;\\;(\\text{paymentOk}@BK)\\;;\\\\ \\;\\;\\;(\\overline{\\text{bookTicket}@FC_i})\\;;\\\\ \\;\\;\\;(\\text{sendTicketData}@FC_i)\\;;\\\\ \\;\\;\\;(\\\\ \\;\\;\\;\\; 1 + \\\\ \\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;(\\overline{\\text{calcGeoDistance}@GD})\\;;\\\\ \\;\\;\\;\\;\\;(\\text{resDistance}@GD)\\;;\\\\ \\;\\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;\\;1 + \\\\ \\;\\;\\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;\\;\\;(\\\\ \\;\\;\\;\\;\\;\\;\\;\\;(\\overline{\\text{calcGeoDistance}@GD})\\;;\\\\ \\;\\;\\;\\;\\;\\;\\;\\;(\\text{resDistance}@GD)\\\\ \\;\\;\\;\\;\\;\\;\\;)^*\\;;\\\\ \\;\\;\\;\\;\\;\\;\\;(\\overline{\\text{bookTransport}@NCC_k})\\;;\\\\ \\;\\;\\;\\;\\;\\;\\;(\\text{resBookTransport}@NCC_k)\\;;\\\\ \\;\\;\\;\\;\\;\\;)\\\\ \\;\\;\\;\\;\\;)\\\\ \\;\\;\\;\\;)\\\\ \\;\\;\\;)\\;;\\\\ \\;\\;\\;(\\overline{\\text{sendTicketAndData}@USR_j})\\\\ \\;\\;)\\\\ \\;)\\\\ )\\)</p>"},{"location":"choreographies/#fc_i","title":"\\(FC_i\\)","text":"<p>\\(\\text{proj}(\\text{reqFlight}, FC_i) = \\overline{\\text{reqFlightInfo}}@ACM\\;;\\;\\text{resFlightInfo}@ACM\\)</p> <p>\\(\\text{proj}(\\text{lastMinOffer}, FC_i) = \\\\ \\;\\;\\;(\\overline{\\text{recvOffer}}@ACM)\\;;\\;1\\;;\\;1\\;;\\;\\;1\\;;\\;(\\text{confirmRecv}@ACM)\\; \\\\ =\\overline{\\text{recvOffer}}@ACM\\;;\\;\\text{confirmRecv}@ACM\\)</p> <p>\\(\\text{proj}(\\text{buyTicket}, FC_i) = (\\;1\\;;\\;1\\;;\\;1\\;;\\;1\\;;\\;1\\;;\\;\\;(\\;(1;1)\\;+\\;(\\;1\\;;\\;\\\\ \\;\\;(\\text{bookTicket}@ACM)\\;;\\;(\\overline{\\text{sendTicketData}}@ACM)\\;;\\\\ \\;\\;(\\;1\\;+\\;(\\;1\\;;\\;1\\;;\\;(\\;1\\;+\\;\\;(\\;(\\;1\\;;\\;1\\;)^*;\\;1;\\;1\\;;\\;))));1)))\\\\ = (\\text{bookTicket}@ACM) \\;;\\;(\\overline{\\text{sendTicketData}}@ACM)\\)</p>"},{"location":"choreographies/#pg","title":"\\(PG\\)","text":"<p>\\(\\text{proj}(\\text{lastMinOffer}, PG) = \\;1\\;;\\;\\text{notifyPG}@ACM\\;;\\;\\overline{\\text{notifyUsr}}@USR_j\\;;\\;1\\;;\\;1\\; \\\\ \\;= \\;\\text{notifyPG}@ACM\\;;\\;\\overline{\\text{notifyUsr}}@USR_j\\)</p>"},{"location":"choreographies/#bk","title":"\\(BK\\)","text":"<p>\\(\\text{proj}(\\text{buyTicket}, BK) = \\;1\\;;\\\\ \\;(\\;\\text{requestPayment}@ACM)\\;;\\;(\\overline{\\text{resPaymentData}}@ACM)\\;;\\;1\\;;\\\\ \\;(\\text{payReceipt}@USR_j)\\;;\\;(\\;(\\overline{\\text{paymentFailed}}@USR_j)\\;+\\;(\\;(\\overline{\\text{paymentOk}}@USR_j)\\;;\\\\ 1\\;;\\;1\\;;\\;(\\;(1;1)\\;+\\;(\\;1\\;;\\;1\\;;(\\;1\\;+\\;\\;(\\;(\\;1\\;;\\;1\\;)^*;1;\\;\\;1\\;))));1))\\\\ = (\\text{requestPayment}@ACM)\\; ;\\; (\\overline{\\text{resPaymentData}}@ACM)\\; ;\\\\ \\;\\;\\;(\\text{payReceipt}@USR_j)\\;; \\;(\\; (\\overline{\\text{paymentFailed}}@USR_j)\\; +\\; (\\overline{\\text{paymentOk}}@USR_j)\\;)\\)</p>"},{"location":"choreographies/#gd","title":"\\(GD\\)","text":"<p>\\(\\text{proj}(\\text{buyTicket}, GD) = \\;1\\;;\\;1\\;;\\;1\\;;\\;1\\;;\\;1\\;;\\;(\\;(1;1)\\;+\\;(\\;1\\;;\\;1\\;;\\;1\\;;\\;(\\;1\\;+\\;(\\;\\\\ \\;\\;\\;(\\text{calcGeoDistance}@ACM)\\;;\\;(\\overline{\\text{resDistance}}@ACM)\\;;\\\\ \\;\\;\\;(\\;1\\;+\\;\\;(\\;(\\;(\\text{calcGeoDistance}@ACM)\\;;\\;(\\overline{\\text{resDistance}}@ACM)\\;)^*;\\\\ 1;\\;\\;1\\;))));1))\\\\ = (\\;1\\;+\\;(\\text{calcGeoDistance}@ACM)\\;;\\;(\\overline{\\text{resDistance}}@ACM)\\;;\\; (\\;1\\;+\\;(\\text{calcGeoDistance}@ACM)\\;;\\;(\\overline{\\text{resDistance}}@ACM)))\\)</p>"},{"location":"choreographies/#usr_j","title":"\\(USR_j\\)","text":"<p>\\(\\text{proj}(\\text{regUser}, USR_j) = \\overline{\\text{registerFlightInterest}}@ACM\\;;\\;(\\text{resConfirm}@ACM\\;+\\; \\text{resError}@ACM)\\)</p> <p>\\(\\text{proj}(\\text{lastMinOffer}, USR_j) = \\;1\\;;\\;1\\;;\\;(\\text{notifyUsr}@PG)\\;;\\;(\\overline{\\text{offerRecv}}@ACM)\\;;\\;1 \\\\ \\;=\\;\\text{notifyUsr}@PG\\;;\\;\\overline{\\text{offerRecv}}@ACM\\)</p> <p>\\(\\text{proj}(\\text{buyTicket}, USR_j) = (\\\\ \\;(\\overline{\\text{wantToBuy}}@ACM)\\;;\\\\ \\;1\\;;\\\\ \\;1\\;;\\\\ \\;(\\text{resPaymentData}@ACM)\\;;\\\\ \\;(\\overline{\\text{payReceipt}}@BK)\\;;\\\\ \\;(\\\\ \\;\\;(\\\\ \\;\\;\\;1\\\\\\ \\;\\;\\;(\\text{sendError}text{sendTicketAndData}@ACM)\\\\ \\;\\;)\\\\ \\;)\\\\ )\\\\ = (\\overline{\\text{wantToBuy}}@ACM)\\;;\\; (\\text{resPaymentData}@ACM)\\;;\\;\\\\  (\\overline{\\text{payReceipt}}@BK)\\;;\\; (\\;(\\text{sendError}@ACM)\\;+\\; (\\text{sendTicketAndData}@ACM)\\;)\\)</p>"},{"location":"choreographies/#ncc_k","title":"\\(NCC_k\\)","text":"<p>\\(\\text{proj}(\\text{buyTicket}, NCC_k) = \\;1\\;;\\;1\\;;\\;1\\;;\\;1\\;;\\;1\\;;\\\\ \\;\\;(\\;(1;1)\\;+\\;(\\;1\\;;\\;1\\;;\\;1\\;;\\;(\\;1\\;+\\;(\\;1\\;;\\;1\\;;\\;(\\;1\\;+\\;\\;(\\;(\\;1\\;;\\;1\\;)^*;\\\\ \\;\\;\\;\\;(\\text{bookTransport}@ACM);\\\\ \\;\\;\\;\\;(\\overline{\\text{resBookTransport}}@ACM)\\;;\\\\ \\;\\;))));1)) = (\\text{bookTransport}@ACM)\\;;\\;(\\overline{\\text{resBookTransport}}@ACM)\\)</p>"},{"location":"soa_schema/","title":"SOA Schema","text":"<p>Here is the interal schema of the Service Oriented Architecture:</p> <p></p> <p>Only a single Flight Company and NCC instance are created.</p>"},{"location":"soa_schema/#port-assigned-to-each-service","title":"Port assigned to each service","text":"Service Port ACMESkyWeb 8078 ACMESkyService 8090 ACMESkyDB 3306 ACMESkyNCC 8089 BankWeb 8083 BankService 8094 BankDB 3308 FlightCompanyService 8091 FlightCompanyDB 3307 GeoDistance 8093 ProntogramWeb 8079 ProntogramService 8092 Operate 8081 Tasklist 8082 Workers 8080"},{"location":"services/acmesky/","title":"ACMESky Api Interface","text":"<p>This is the main service of the project.</p>"},{"location":"services/acmesky/#swagger-documentation","title":"Swagger Documentation","text":""},{"location":"services/bank/","title":"Bank","text":""},{"location":"services/bank/#swagger-documentation","title":"Swagger Documentation","text":""},{"location":"services/flight_company/","title":"Flight Company","text":""},{"location":"services/flight_company/#swagger-documentation","title":"Swagger Documentation","text":""},{"location":"services/geo_distance/","title":"Geographical Distance","text":""},{"location":"services/geo_distance/#swagger-documentation","title":"Swagger Documentation","text":""},{"location":"services/ncc/","title":"Rental NCC","text":""},{"location":"services/ncc/#middleware","title":"Middleware","text":""},{"location":"services/ncc/#swagger-documentation","title":"Swagger Documentation","text":""},{"location":"services/prontogram/","title":"Prontogram","text":""},{"location":"services/prontogram/#swagger-documentation","title":"Swagger Documentation","text":""}]}